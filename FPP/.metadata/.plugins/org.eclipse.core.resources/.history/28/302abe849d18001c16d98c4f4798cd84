package prog10_2;

import java.util.Objects;

public class Rational {
	private int p;
	private int q;

	public Rational(int p, int q){
		if (q < 0) throw new IllegalArgumentException(" q should be always positive");
		this.p = p;
		this.q = q;
	}

	public int getP() {
		return p;
	}

	public void setP(int pValue) {
		this.p = pValue;
	}

	public int getQ() {
		return q;
	}

	public void setQ(int qValue) {
		this.q = qValue;
	}

	public Rational add(Rational rational) {
		int valueOfP = rational.p;
		int valueOfQ = rational.q;
		Rational retObj = new Rational((p * valueOfQ) + (valueOfP * q), q * valueOfQ);
		return retObj;

	}

	public Rational multiply(Rational rational) {
		int valueOfP = rational.p;
		int valueOfQ = rational.q;
		Rational retObj = new Rational(p * valueOfP, q * valueOfQ);
		return retObj;
	}

	public int compareTo(Rational rat) {
		int valueOfP = rat.p;
		int valueOfQ = rat.q;
		if ((p * valueOfQ) < (q * valueOfP))
			return -1;
		else if ((p * valueOfQ) > (q * valueOfP))
			return 1;
		else
			return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (object == null) {
			return false;
		}
			
		if (getClass() != object.getClass()) {
			return false;
		}
			
		Rational ratObj = (Rational) object;
		return p * ratObj.q == q * ratObj.p;

	}

	public int hashCode() {
		return Objects.hash(p, q);
	}

	public String toString() {

		return String.format("%1s/%1s", p, q);
	}

	public static void main(String[] args) {

		Rational ratOne = new Rational(2, 3);
		Rational ratTwo = new Rational(-17, 5);
		Rational ratThree = new Rational(1, 3);
		
		Rational result1 = ratOne.multiply(ratTwo).add(ratThree);
		Rational result2 = ratTwo.add(ratThree).multiply(ratOne);
		if (result1.compareTo(result2) < 0) {
			System.out.println(ratOne + "*" + ratTwo + "+" + ratThree + " is less than " + ratOne + "*" + "(" + ratTwo + "+" + ratThree + ")");
		} else {
			System.out.println(ratOne + "*" + ratTwo + "+" + ratThree + " is greater than " + ratOne + "*" + "(" + ratTwo + "+" + ratThree + ")");
		}
	}
}
