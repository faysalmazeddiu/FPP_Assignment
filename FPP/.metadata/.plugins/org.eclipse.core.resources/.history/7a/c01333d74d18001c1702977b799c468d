package prog10_1;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class EmployeeBST {
	
	/** The tree root. */
	private Node rootNode;
	private NameComparator nameComparator;

	//start with an empty tree
	public EmployeeBST(NameComparator nameComparator) {
		rootNode = null;
		this.nameComparator = nameComparator;
	}

	/**
	 * Prints the values in the nodes of the tree in sorted order.
	 */
	public void printTree() {
		
		if(rootNode != null) {
			printTree(rootNode);
		}else {
			System.out.println(" Tree is Empty");
		}
		
	}

	private void printTree(Node tree) {
		if (tree != null) {
			printTree(tree.left);
			System.out.println(tree.employee);
			printTree(tree.right);
		}
	}
	
	public void printAsDiagram() {
		BTreePrinter.printNode(rootNode);
	}
	
	public boolean find(Employee employee) {
		if(employee==null) {
			return false;
		}
		boolean value=find(employee,rootNode);
		return value;
	}
	private boolean find(Employee empl, Node node){
		if(node == null) {
			return false;
		} 
		if(node != null && node.employee.equals(empl)) {
			return true;
		} 
		
		if(nameComparator.compare(empl, node.employee) < 0) {
			return find(empl,node.left) ;
		}else {
			return find(empl,node.right);
		}
		
	}

	public void insert(Employee empl) {
		if (rootNode == null) {
			rootNode = new Node(empl, null, null);
		}
		else {
			Node n = rootNode;
			boolean inserted = false;
			while(!inserted){
				if(nameComparator.compare(empl, n.employee) < 0) {
					
					if(n.left == null){
						n.left = new Node(empl,null,null);
						inserted = true;
					}
					else {
						n = n.left;
					}
				}
				
				else if(nameComparator.compare(empl, n.employee) >=0){ 
									
					if(n.right==null){
						n.right = new Node(empl, null, null);
						inserted = true;
					}
					else {
						n = n.right;
					}
				}
				
			}

		}
	}
	public static void main(String[] args){
		MyBST bst = new MyBST();
		for(int i = 15; i >= 0; --i){
			bst.insert(new Integer(2*i));
			bst.insert(new Integer(2*i - 5));
		}
		bst.printTree();
		System.out.println("Is 24 in the tree? "+bst.find(new Integer(24)));
		System.out.println("Is 27 in the tree? "+bst.find(new Integer(27)));
		
	}

	private class Node {

		// Constructors
		Node(Employee employee) {
			this(employee, null, null);
		}

		Node(Employee employee, Node left, Node right) {
			this.employee = employee;
			this.left = left;
			this.right = right;
		}
		private Employee employee; // The data in the node
		private Node left; // Left child
		private Node right; // Right child
	}
	
	static class BTreePrinter {

	    public static void printNode(Node root) {
	        int maxLevel = BTreePrinter.maxLevel(root);

	        printNodeInternal(Collections.singletonList(root), 1, maxLevel);
	    }

	    private static void printNodeInternal(List nodes, int level, int maxLevel) {
	        if (nodes.isEmpty() || BTreePrinter.isAllElementsNull(nodes))
	            return;

	        int floor = maxLevel - level;
	        int endgeLines = (int) Math.pow(2, (Math.max(floor - 1, 0)));
	        int firstSpaces = (int) Math.pow(2, (floor)) - 1;
	        int betweenSpaces = (int) Math.pow(2, (floor + 1)) - 1;

	        BTreePrinter.printWhitespaces(firstSpaces);

	        List newNodes = new ArrayList();
	        for (Object node : nodes) {
	            if (node != null) {
	                System.out.print(((Node)node).employee);
	                newNodes.add(((Node)node).left);
	                newNodes.add(((Node)node).right);
	            } else {
	                newNodes.add(null);
	                newNodes.add(null);
	                System.out.print(" ");
	            }

	            BTreePrinter.printWhitespaces(betweenSpaces);
	        }
	        System.out.println("");

	        for (int i = 1; i <= endgeLines; i++) {
	            for (int j = 0; j < nodes.size(); j++) {
	                BTreePrinter.printWhitespaces(firstSpaces - i);
	                if (nodes.get(j) == null) {
	                    BTreePrinter.printWhitespaces(endgeLines + endgeLines + i + 1);
	                    continue;
	                }

	                if (((Node)nodes.get(j)).left != null)
	                    System.out.print("/");
	                else
	                    BTreePrinter.printWhitespaces(1);

	                BTreePrinter.printWhitespaces(i + i - 1);

	                if (((Node)nodes.get(j)).right != null)
	                    System.out.print("\\");
	                else
	                    BTreePrinter.printWhitespaces(1);

	                BTreePrinter.printWhitespaces(endgeLines + endgeLines - i);
	            }

	            System.out.println("");
	        }

	        printNodeInternal(newNodes, level + 1, maxLevel);
	    }

	    static void printWhitespaces(int count) {
	        for (int i = 0; i < count; i++)
	            System.out.print(" ");
	    }

	    static int maxLevel(Node node) {
	        if (node == null)
	            return 0;

	        return Math.max(BTreePrinter.maxLevel(node.left), BTreePrinter.maxLevel(node.right)) + 1;
	    }

	    static boolean isAllElementsNull(List list) {
	        for (Object object : list) {
	            if (object != null)
	                return false;
	        }

	        return true;
	    }
	}

}
